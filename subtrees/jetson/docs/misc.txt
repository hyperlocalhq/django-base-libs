=== CHECK UNLOADED APPS ===

def check_unloaded():
    from django.db.models.loading import get_apps
    from django.conf import settings
    to_load = set(settings.INSTALLED_APPS)
    loaded = set([app.__name__[:-7] for app in get_apps()])
    for app in to_load - loaded:
        print app
    return list(to_load - loaded)

check_unloaded()








Replace
\S+ = settings.GET_MODULE_ATTRIBUTE\('([^']+)', '([^']+)'\)
to
from general.$1 from $2


=== Removing Markup from Descriptions ===

from general.site_specific.models import ContextItem
from general.utils.misc import html_to_plain_text
for el in ContextItem.objects.all():
    instance = el.content_object
    instance.description_en = html_to_plain_text(instance.description_en)
    instance.description_de = html_to_plain_text(instance.description_de)
    instance.save()

=== Address cleanup ===

for el in Address.objects.all():
    if el.address_events.count() + el.individual_address.count() + el.institutional_address.count() == 0:
        el.delete()

=== ContentType object cleanup ===
from django.contrib.contenttypes.models import ContentType
for ct in ContentType.objects.all():
    print ct
    try:
        print ct.model_class().objects.count()
    except:
        print '(broken)'
        ct.delete()


=== Create Slugs for FlatPages ===
from django.db import models
FlatPage = models.get_model("flatpages", "FlatPage")
from django.template.defaultfilters import slugify
from general.apps.utils.misc import get_unique_value

for f in FlatPage.objects.all():
    f.slug = get_unique_value(FlatPage, slugify(f.slug or f.title), separator="_", instance_pk=f.id)
    f.save()

    
