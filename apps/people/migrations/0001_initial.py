# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import mptt.fields
import jetson.apps.people.base
import filebrowser.fields
from django.conf import settings
import base_libs.models.fields
import jetson.apps.optionset.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('i18n', '__first__'),
        ('institutions', '0001_initial'),
        ('optionset', '__first__'),
        ('location', '__first__'),
        ('structure', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='IndividualContact',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('location_title', models.CharField(max_length=255, verbose_name='Location title', blank=True)),
                ('is_primary', models.BooleanField(default=True, verbose_name='Primary contact')),
                ('is_seasonal', models.BooleanField(default=False, verbose_name='Seasonal')),
                ('validity_start_yyyy', models.IntegerField(blank=True, null=True, verbose_name='From Year', choices=[(2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024)])),
                ('validity_start_mm', models.SmallIntegerField(blank=True, null=True, verbose_name='From Month', choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')])),
                ('validity_start_dd', models.SmallIntegerField(blank=True, null=True, verbose_name='From Day', choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)])),
                ('validity_end_yyyy', models.IntegerField(blank=True, null=True, verbose_name='Till Year', choices=[(2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024)])),
                ('validity_end_mm', models.SmallIntegerField(blank=True, null=True, verbose_name='Till Month', choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')])),
                ('validity_end_dd', models.SmallIntegerField(blank=True, null=True, verbose_name='Till Day', choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)])),
                ('institutional_title', models.CharField(help_text='i.e. "director", "manager", "student", "doctor", etc.', max_length=255, verbose_name='Title in the institution', blank=True)),
                ('is_billing_address', models.BooleanField(default=True, verbose_name='Use this address for billing')),
                ('is_shipping_address', models.BooleanField(default=True, verbose_name='Use this address for shipping')),
                ('phone0_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('phone0_area', models.CharField(default=b'30', max_length=6, verbose_name='Area Code', blank=True)),
                ('phone0_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('is_phone0_default', models.BooleanField(default=True, verbose_name='Default?')),
                ('is_phone0_on_hold', models.BooleanField(default=False, verbose_name='Default?')),
                ('phone1_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('phone1_area', models.CharField(default=b'30', max_length=6, verbose_name='Area Code', blank=True)),
                ('phone1_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('is_phone1_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_phone1_on_hold', models.BooleanField(default=False, verbose_name='Default?')),
                ('phone2_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('phone2_area', models.CharField(max_length=6, verbose_name='Area Code', blank=True)),
                ('phone2_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('is_phone2_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_phone2_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('url0_link', base_libs.models.fields.URLField(verbose_name='URL', blank=True)),
                ('is_url0_default', models.BooleanField(default=True, verbose_name='Default?')),
                ('is_url0_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('url1_link', base_libs.models.fields.URLField(verbose_name='URL', blank=True)),
                ('is_url1_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_url1_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('url2_link', base_libs.models.fields.URLField(verbose_name='URL', blank=True)),
                ('is_url2_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_url2_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('im0_address', models.CharField(max_length=255, verbose_name='Instant Messenger', blank=True)),
                ('is_im0_default', models.BooleanField(default=True, verbose_name='Default?')),
                ('is_im0_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('im1_address', models.CharField(max_length=255, verbose_name='Instant Messenger', blank=True)),
                ('is_im1_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_im1_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('im2_address', models.CharField(max_length=255, verbose_name='Instant Messenger', blank=True)),
                ('is_im2_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_im2_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('email0_address', models.CharField(max_length=255, verbose_name='Email Address', blank=True)),
                ('is_email0_default', models.BooleanField(default=True, verbose_name='Default?')),
                ('is_email0_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('email1_address', models.CharField(max_length=255, verbose_name='Email Address', blank=True)),
                ('is_email1_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_email1_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('email2_address', models.CharField(max_length=255, verbose_name='Email Address', blank=True)),
                ('is_email2_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_email2_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('email0_type', models.ForeignKey(related_name='individual_contacts0', verbose_name='Email Type', blank=True, to='optionset.EmailType', null=True)),
                ('email1_type', models.ForeignKey(related_name='individual_contacts1', verbose_name='Email Type', blank=True, to='optionset.EmailType', null=True)),
                ('email2_type', models.ForeignKey(related_name='individual_contacts2', verbose_name='Email Type', blank=True, to='optionset.EmailType', null=True)),
                ('im0_type', models.ForeignKey(related_name='individual_contacts0', verbose_name='IM Type', blank=True, to='optionset.IMType', null=True)),
                ('im1_type', models.ForeignKey(related_name='individual_contacts1', verbose_name='IM Type', blank=True, to='optionset.IMType', null=True)),
                ('im2_type', models.ForeignKey(related_name='individual_contacts2', verbose_name='IM Type', blank=True, to='optionset.IMType', null=True)),
                ('institution', models.ForeignKey(verbose_name='Institution', blank=True, to='institutions.Institution', null=True)),
                ('location_type', models.ForeignKey(default=jetson.apps.people.base.get_default_ind_loc_type, verbose_name='Location type', to='optionset.IndividualLocationType')),
            ],
            options={
                'ordering': ['-is_primary'],
                'abstract': False,
                'verbose_name': 'individual contact',
                'verbose_name_plural': 'individual contacts',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IndividualType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('sort_order', models.IntegerField(default=0, verbose_name='sort order', editable=False, blank=True)),
                ('title', base_libs.models.fields.MultilingualCharField(verbose_name='title', max_length=255, null=True, editable=False)),
                ('title_de', models.CharField(max_length=255, verbose_name='title')),
                ('title_en', models.CharField(max_length=255, verbose_name='title', blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name='child_set', blank=True, to='people.IndividualType', null=True)),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name': 'individual type',
                'verbose_name_plural': 'individual types',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('person_repr', models.CharField(verbose_name='Person Representation', max_length=200, editable=False, blank=True)),
                ('nickname', models.CharField(max_length=200, verbose_name='Nickname', blank=True)),
                ('birthname', models.CharField(max_length=200, verbose_name='Birth / Maiden name', blank=True)),
                ('gender', models.CharField(blank=True, max_length=1, verbose_name='Gender', choices=[(b'M', 'Male'), (b'F', 'Female')])),
                ('birthday_yyyy', models.IntegerField(blank=True, null=True, verbose_name='Year of Birth', choices=[(1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939), (1938, 1938), (1937, 1937), (1936, 1936), (1935, 1935), (1934, 1934), (1933, 1933), (1932, 1932), (1931, 1931), (1930, 1930), (1929, 1929), (1928, 1928), (1927, 1927), (1926, 1926), (1925, 1925), (1924, 1924), (1923, 1923), (1922, 1922), (1921, 1921), (1920, 1920), (1919, 1919), (1918, 1918), (1917, 1917), (1916, 1916)])),
                ('birthday_mm', models.SmallIntegerField(blank=True, null=True, verbose_name='Month of Birth', choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')])),
                ('birthday_dd', models.SmallIntegerField(blank=True, null=True, verbose_name='Day of Birth', choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)])),
                ('degree', models.CharField(max_length=200, verbose_name='Academic Degree', blank=True)),
                ('occupation', models.CharField(max_length=200, verbose_name='Current Occupation', blank=True)),
                ('interests', models.CharField(max_length=200, verbose_name='Interests', blank=True)),
                ('description', base_libs.models.fields.MultilingualTextField(default=b'', verbose_name='Description', null=True, editable=False, blank=True)),
                ('image', filebrowser.fields.FileBrowseField(max_length=255, verbose_name='Image', blank=True)),
                ('status', models.CharField(default=b'unconfirmed', max_length=20, verbose_name='Status', blank=True, choices=[(b'unconfirmed', 'Unconfirmed'), (b'published', 'Published'), (b'not_listed', 'Not Listed'), (b'import', 'Imported')])),
                ('display_birthday', models.BooleanField(default=True, verbose_name='Display birthday to public')),
                ('display_email', models.BooleanField(default=False, verbose_name='Display email address to public')),
                ('display_address', models.BooleanField(default=True, verbose_name='Display address data to public')),
                ('display_phone', models.BooleanField(default=True, verbose_name='Display phone numbers to public')),
                ('display_fax', models.BooleanField(default=True, verbose_name='Display fax numbers to public')),
                ('display_mobile', models.BooleanField(default=True, verbose_name='Display mobile phones to public')),
                ('display_im', models.BooleanField(default=True, verbose_name='Display instant messengers to public')),
                ('display_username', models.BooleanField(default=False, verbose_name='Display user name instead of full name')),
                ('allow_search_engine_indexing', models.BooleanField(default=True, verbose_name='Allow indexing by search engines')),
                ('completeness', models.SmallIntegerField(default=0, verbose_name='Completeness in %')),
                ('description_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('description_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('context_categories', mptt.fields.TreeManyToManyField(to='structure.ContextCategory', verbose_name='Context categories', blank=True)),
                ('creative_sectors', mptt.fields.TreeManyToManyField(related_name='creative_industry_people', verbose_name='Creative sectors', to='structure.Term', blank=True)),
                ('individual_type', mptt.fields.TreeForeignKey(verbose_name='Type', blank=True, to='people.IndividualType', null=True)),
                ('nationality', models.ForeignKey(blank=True, to='i18n.Nationality', max_length=200, null=True, verbose_name='Nationality')),
                ('preferred_language', models.ForeignKey(verbose_name='Preferred Language', blank=True, to='i18n.Language', null=True)),
                ('prefix', models.ForeignKey(verbose_name='Prefix', blank=True, to='optionset.Prefix', null=True)),
                ('salutation', models.ForeignKey(verbose_name='Salutation', blank=True, to='optionset.Salutation', null=True)),
                ('spoken_languages', models.ManyToManyField(related_name='speaking_people', verbose_name='Languages spoken', to='i18n.Language', blank=True)),
                ('timezone', models.ForeignKey(blank=True, to='i18n.TimeZone', max_length=200, null=True, verbose_name='Current Timezone')),
                ('user', models.OneToOneField(related_name='profile', verbose_name='User', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'individual (person)',
                'verbose_name_plural': 'individuals (people)',
                'permissions': (('can_see_birthday', 'Can see birthday'), ('can_see_addresses', 'Can see addresses'), ('can_see_phones', 'Can see phone numbers'), ('can_see_faxes', 'Can see fax numbers'), ('can_see_mobiles', 'Can see mobile phone numbers'), ('can_see_ims', 'Can see instant messengers')),
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='individualcontact',
            name='person',
            field=models.ForeignKey(verbose_name='Person', to='people.Person'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individualcontact',
            name='phone0_type',
            field=models.ForeignKey(related_name='individual_contacts0', default=jetson.apps.optionset.models.get_default_phonetype_for_phone, blank=True, to='optionset.PhoneType', null=True, verbose_name='Phone Type'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individualcontact',
            name='phone1_type',
            field=models.ForeignKey(related_name='individual_contacts1', default=jetson.apps.optionset.models.get_default_phonetype_for_fax, blank=True, to='optionset.PhoneType', null=True, verbose_name='Phone Type'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individualcontact',
            name='phone2_type',
            field=models.ForeignKey(related_name='individual_contacts2', default=jetson.apps.optionset.models.get_default_phonetype_for_mobile, blank=True, to='optionset.PhoneType', null=True, verbose_name='Phone Type'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individualcontact',
            name='postal_address',
            field=models.ForeignKey(related_name='individual_address', verbose_name='Postal Address', blank=True, to='location.Address', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individualcontact',
            name='url0_type',
            field=models.ForeignKey(related_name='individual_contacts0', verbose_name='URL Type', blank=True, to='optionset.URLType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individualcontact',
            name='url1_type',
            field=models.ForeignKey(related_name='individual_contacts1', verbose_name='URL Type', blank=True, to='optionset.URLType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individualcontact',
            name='url2_type',
            field=models.ForeignKey(related_name='individual_contacts2', verbose_name='URL Type', blank=True, to='optionset.URLType', null=True),
            preserve_default=True,
        ),
    ]
