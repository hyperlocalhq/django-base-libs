# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import jetson.apps.institutions.base
import filebrowser.fields
import mptt.fields
import jetson.apps.optionset.models
import base_libs.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('optionset', '__first__'),
        ('location', '__first__'),
        ('structure', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('is_appointment_based', models.BooleanField(default=False, verbose_name='Visiting by Appointment')),
                ('mon_open', models.TimeField(null=True, verbose_name='Opens on Monday', blank=True)),
                ('mon_break_close', models.TimeField(null=True, verbose_name='Break Starts on Monday', blank=True)),
                ('mon_break_open', models.TimeField(null=True, verbose_name='Break Ends on Monday', blank=True)),
                ('mon_close', models.TimeField(null=True, verbose_name='Closes on Monday', blank=True)),
                ('tue_open', models.TimeField(null=True, verbose_name='Opens on Tuesday', blank=True)),
                ('tue_break_close', models.TimeField(null=True, verbose_name='Break Starts on Tuesday', blank=True)),
                ('tue_break_open', models.TimeField(null=True, verbose_name='Break Ends on Tuesday', blank=True)),
                ('tue_close', models.TimeField(null=True, verbose_name='Closes on Tuesday', blank=True)),
                ('wed_open', models.TimeField(null=True, verbose_name='Opens on Wednesday', blank=True)),
                ('wed_break_close', models.TimeField(null=True, verbose_name='Break Starts on Wednesday', blank=True)),
                ('wed_break_open', models.TimeField(null=True, verbose_name='Break Ends on Wednesday', blank=True)),
                ('wed_close', models.TimeField(null=True, verbose_name='Closes on Wednesday', blank=True)),
                ('thu_open', models.TimeField(null=True, verbose_name='Opens on Thursday', blank=True)),
                ('thu_break_close', models.TimeField(null=True, verbose_name='Break Starts on Thursday', blank=True)),
                ('thu_break_open', models.TimeField(null=True, verbose_name='Break Ends on Thursday', blank=True)),
                ('thu_close', models.TimeField(null=True, verbose_name='Closes on Thursday', blank=True)),
                ('fri_open', models.TimeField(null=True, verbose_name='Opens on Friday', blank=True)),
                ('fri_break_close', models.TimeField(null=True, verbose_name='Break Starts on Friday', blank=True)),
                ('fri_break_open', models.TimeField(null=True, verbose_name='Break Ends on Friday', blank=True)),
                ('fri_close', models.TimeField(null=True, verbose_name='Closes on Friday', blank=True)),
                ('sat_open', models.TimeField(null=True, verbose_name='Opens on Saturday', blank=True)),
                ('sat_break_close', models.TimeField(null=True, verbose_name='Break Starts on Saturday', blank=True)),
                ('sat_break_open', models.TimeField(null=True, verbose_name='Break Ends on Saturday', blank=True)),
                ('sat_close', models.TimeField(null=True, verbose_name='Closes on Saturday', blank=True)),
                ('sun_open', models.TimeField(null=True, verbose_name='Opens on Sunday', blank=True)),
                ('sun_break_close', models.TimeField(null=True, verbose_name='Break Starts on Sunday', blank=True)),
                ('sun_break_open', models.TimeField(null=True, verbose_name='Break Ends on Sunday', blank=True)),
                ('sun_close', models.TimeField(null=True, verbose_name='Closes on Sunday', blank=True)),
                ('exceptions', base_libs.models.fields.MultilingualTextField(default=b'', verbose_name='Exceptions for working hours', null=True, editable=False, blank=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('title2', models.CharField(max_length=255, verbose_name='Title (second line)', blank=True)),
                ('slug', models.CharField(max_length=255, verbose_name='Slug')),
                ('description', base_libs.models.fields.MultilingualTextField(default=b'', verbose_name='Description', null=True, editable=False, blank=True)),
                ('image', filebrowser.fields.FileBrowseField(max_length=255, verbose_name='Image', blank=True)),
                ('status', models.CharField(default=b'draft', max_length=20, verbose_name='Status', blank=True, choices=[(b'draft', 'Draft'), (b'published', 'Published'), (b'published_commercial', 'Published-Commercial'), (b'not_listed', 'Not Listed'), (b'import', 'Imported'), (b'event_location', 'Event Location')])),
                ('access', models.CharField(max_length=255, verbose_name='Access', blank=True)),
                ('is_parking_avail', models.BooleanField(default=False, verbose_name='Is parking available?')),
                ('is_wlan_avail', models.BooleanField(default=False, verbose_name='Is WLAN Internet available?')),
                ('is_non_profit', models.BooleanField(default=False, verbose_name='Non profit (business elsewhere)?')),
                ('tax_id_number', models.CharField(max_length=100, verbose_name='Tax ID', blank=True)),
                ('vat_id_number', models.CharField(max_length=100, verbose_name='VAT ID', blank=True)),
                ('is_card_visa_ok', models.BooleanField(default=False, verbose_name='Visa')),
                ('is_card_mastercard_ok', models.BooleanField(default=False, verbose_name='MasterCard')),
                ('is_card_americanexpress_ok', models.BooleanField(default=False, verbose_name='American Express')),
                ('is_paypal_ok', models.BooleanField(default=False, verbose_name='PayPal')),
                ('is_cash_ok', models.BooleanField(default=False, verbose_name='Cash')),
                ('is_transaction_ok', models.BooleanField(default=False, verbose_name='Bank transfer')),
                ('is_prepayment_ok', models.BooleanField(default=False, verbose_name='Prepayment')),
                ('is_on_delivery_ok', models.BooleanField(default=False, verbose_name='Payment on delivery')),
                ('is_invoice_ok', models.BooleanField(default=False, verbose_name='Invoice')),
                ('is_ec_maestro_ok', models.BooleanField(default=False, verbose_name='EC Maestro')),
                ('is_giropay_ok', models.BooleanField(default=False, verbose_name='Giropay')),
                ('establishment_yyyy', models.IntegerField(blank=True, null=True, verbose_name='Year of Establishment', choices=[(2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939), (1938, 1938), (1937, 1937), (1936, 1936), (1935, 1935), (1934, 1934), (1933, 1933), (1932, 1932), (1931, 1931), (1930, 1930), (1929, 1929), (1928, 1928), (1927, 1927), (1926, 1926), (1925, 1925), (1924, 1924), (1923, 1923), (1922, 1922), (1921, 1921), (1920, 1920), (1919, 1919), (1918, 1918), (1917, 1917), (1916, 1916), (1915, 1915), (1914, 1914), (1913, 1913), (1912, 1912), (1911, 1911), (1910, 1910), (1909, 1909), (1908, 1908), (1907, 1907), (1906, 1906), (1905, 1905), (1904, 1904), (1903, 1903), (1902, 1902), (1901, 1901), (1900, 1900), (1899, 1899), (1898, 1898), (1897, 1897), (1896, 1896), (1895, 1895), (1894, 1894), (1893, 1893), (1892, 1892), (1891, 1891), (1890, 1890), (1889, 1889), (1888, 1888), (1887, 1887), (1886, 1886), (1885, 1885), (1884, 1884), (1883, 1883), (1882, 1882), (1881, 1881), (1880, 1880), (1879, 1879), (1878, 1878), (1877, 1877), (1876, 1876), (1875, 1875), (1874, 1874), (1873, 1873), (1872, 1872), (1871, 1871), (1870, 1870), (1869, 1869), (1868, 1868), (1867, 1867), (1866, 1866), (1865, 1865), (1864, 1864), (1863, 1863), (1862, 1862), (1861, 1861), (1860, 1860), (1859, 1859), (1858, 1858), (1857, 1857), (1856, 1856), (1855, 1855), (1854, 1854), (1853, 1853), (1852, 1852), (1851, 1851), (1850, 1850), (1849, 1849), (1848, 1848), (1847, 1847), (1846, 1846), (1845, 1845), (1844, 1844), (1843, 1843), (1842, 1842), (1841, 1841), (1840, 1840), (1839, 1839), (1838, 1838), (1837, 1837), (1836, 1836), (1835, 1835), (1834, 1834), (1833, 1833), (1832, 1832), (1831, 1831), (1830, 1830), (1829, 1829), (1828, 1828), (1827, 1827), (1826, 1826), (1825, 1825), (1824, 1824), (1823, 1823), (1822, 1822), (1821, 1821), (1820, 1820), (1819, 1819), (1818, 1818), (1817, 1817), (1816, 1816)])),
                ('establishment_mm', models.SmallIntegerField(blank=True, null=True, verbose_name='Month of Establishment', choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')])),
                ('nof_employees', models.IntegerField(null=True, verbose_name='Number of Employees', blank=True)),
                ('exceptions_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Sonstige \xd6ffnungszeiten', blank=True)),
                ('exceptions_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('exceptions_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Sonstige \xd6ffnungszeiten', blank=True)),
                ('exceptions_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('description_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('description_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('context_categories', mptt.fields.TreeManyToManyField(to='structure.ContextCategory', verbose_name='Context categories', blank=True)),
                ('creative_sectors', mptt.fields.TreeManyToManyField(related_name='creative_sector_institutions', verbose_name='Creative sectors', to='structure.Term', blank=True)),
            ],
            options={
                'ordering': ('title', 'title2'),
                'abstract': False,
                'verbose_name': 'institution (place)',
                'verbose_name_plural': 'institutions (places)',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InstitutionalContact',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('location_title', models.CharField(max_length=255, verbose_name='Location title', blank=True)),
                ('is_primary', models.BooleanField(default=True, verbose_name='Primary contact')),
                ('is_temporary', models.BooleanField(default=False, verbose_name='Temporary')),
                ('validity_start_yyyy', models.IntegerField(blank=True, null=True, verbose_name='From Year', choices=[(2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024)])),
                ('validity_start_mm', models.SmallIntegerField(blank=True, null=True, verbose_name='From Month', choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')])),
                ('validity_start_dd', models.SmallIntegerField(blank=True, null=True, verbose_name='From Day', choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)])),
                ('validity_end_yyyy', models.IntegerField(blank=True, null=True, verbose_name='Till Year', choices=[(2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024)])),
                ('validity_end_mm', models.SmallIntegerField(blank=True, null=True, verbose_name='Till Month', choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')])),
                ('validity_end_dd', models.SmallIntegerField(blank=True, null=True, verbose_name='Till Day', choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)])),
                ('is_billing_address', models.BooleanField(default=True, verbose_name='Use this address for billing')),
                ('is_shipping_address', models.BooleanField(default=True, verbose_name='Use this address for shipping')),
                ('phone0_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('phone0_area', models.CharField(default=b'30', max_length=6, verbose_name='Area Code', blank=True)),
                ('phone0_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('is_phone0_default', models.BooleanField(default=True, verbose_name='Default?')),
                ('is_phone0_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('phone1_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('phone1_area', models.CharField(default=b'30', max_length=6, verbose_name='Area Code', blank=True)),
                ('phone1_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('is_phone1_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_phone1_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('phone2_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('phone2_area', models.CharField(max_length=6, verbose_name='Area Code', blank=True)),
                ('phone2_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('is_phone2_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_phone2_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('url0_link', base_libs.models.fields.URLField(verbose_name='URL', blank=True)),
                ('is_url0_default', models.BooleanField(default=True, verbose_name='Default?')),
                ('is_url0_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('url1_link', base_libs.models.fields.URLField(verbose_name='URL', blank=True)),
                ('is_url1_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_url1_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('url2_link', base_libs.models.fields.URLField(verbose_name='URL', blank=True)),
                ('is_url2_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_url2_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('im0_address', models.CharField(max_length=255, verbose_name='Instant Messenger', blank=True)),
                ('is_im0_default', models.BooleanField(default=True, verbose_name='Default?')),
                ('is_im0_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('im1_address', models.CharField(max_length=255, verbose_name='Instant Messenger', blank=True)),
                ('is_im1_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_im1_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('im2_address', models.CharField(max_length=255, verbose_name='Instant Messenger', blank=True)),
                ('is_im2_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_im2_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('email0_address', models.CharField(max_length=255, verbose_name='Email Address', blank=True)),
                ('is_email0_default', models.BooleanField(default=True, verbose_name='Default?')),
                ('is_email0_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('email1_address', models.CharField(max_length=255, verbose_name='Email Address', blank=True)),
                ('is_email1_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_email1_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('email2_address', models.CharField(max_length=255, verbose_name='Email Address', blank=True)),
                ('is_email2_default', models.BooleanField(default=False, verbose_name='Default?')),
                ('is_email2_on_hold', models.BooleanField(default=False, verbose_name='On Hold?')),
                ('email0_type', models.ForeignKey(related_name='institutional_contacts0', verbose_name='Email Type', blank=True, to='optionset.EmailType', null=True)),
                ('email1_type', models.ForeignKey(related_name='institutional_contacts1', verbose_name='Email Type', blank=True, to='optionset.EmailType', null=True)),
                ('email2_type', models.ForeignKey(related_name='institutional_contacts2', verbose_name='Email Type', blank=True, to='optionset.EmailType', null=True)),
                ('im0_type', models.ForeignKey(related_name='institutional_contacts0', verbose_name='IM Type', blank=True, to='optionset.IMType', null=True)),
                ('im1_type', models.ForeignKey(related_name='institutional_contacts1', verbose_name='IM Type', blank=True, to='optionset.IMType', null=True)),
                ('im2_type', models.ForeignKey(related_name='institutional_contacts2', verbose_name='IM Type', blank=True, to='optionset.IMType', null=True)),
                ('institution', models.ForeignKey(verbose_name='Institution', to='institutions.Institution')),
                ('location_type', models.ForeignKey(default=jetson.apps.institutions.base.get_default_ins_loc_type, verbose_name='Location type', to='optionset.InstitutionalLocationType')),
                ('phone0_type', models.ForeignKey(related_name='institutional_contacts0', default=jetson.apps.optionset.models.get_default_phonetype_for_phone, blank=True, to='optionset.PhoneType', null=True, verbose_name='Phone Type')),
                ('phone1_type', models.ForeignKey(related_name='institutional_contacts1', default=jetson.apps.optionset.models.get_default_phonetype_for_fax, blank=True, to='optionset.PhoneType', null=True, verbose_name='Phone Type')),
                ('phone2_type', models.ForeignKey(related_name='institutional_contacts2', default=jetson.apps.optionset.models.get_default_phonetype_for_mobile, blank=True, to='optionset.PhoneType', null=True, verbose_name='Phone Type')),
                ('postal_address', models.ForeignKey(related_name='institutional_address', verbose_name='Postal Address', blank=True, to='location.Address', null=True)),
                ('url0_type', models.ForeignKey(related_name='institutional_contacts0', verbose_name='URL Type', blank=True, to='optionset.URLType', null=True)),
                ('url1_type', models.ForeignKey(related_name='institutional_contacts1', verbose_name='URL Type', blank=True, to='optionset.URLType', null=True)),
                ('url2_type', models.ForeignKey(related_name='institutional_contacts2', verbose_name='URL Type', blank=True, to='optionset.URLType', null=True)),
            ],
            options={
                'ordering': ['-is_primary'],
                'abstract': False,
                'verbose_name': 'institutional contact',
                'verbose_name_plural': 'institutional contacts',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InstitutionType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('sort_order', models.IntegerField(default=0, verbose_name='sort order', editable=False, blank=True)),
                ('title', base_libs.models.fields.MultilingualCharField(verbose_name='title', max_length=255, null=True, editable=False)),
                ('title_de', models.CharField(max_length=255, verbose_name='title')),
                ('title_en', models.CharField(max_length=255, verbose_name='title', blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name='child_set', blank=True, to='institutions.InstitutionType', null=True)),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name': 'institution type',
                'verbose_name_plural': 'institution types',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LegalForm',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('title', base_libs.models.fields.MultilingualCharField(verbose_name='title', max_length=200, null=True, editable=False)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort Order')),
                ('title_de', models.CharField(max_length=200, verbose_name='title')),
                ('title_en', models.CharField(max_length=200, verbose_name='title', blank=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'verbose_name': 'Legal Form',
                'verbose_name_plural': 'Legal Forms',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='institution',
            name='institution_types',
            field=mptt.fields.TreeManyToManyField(to='institutions.InstitutionType', verbose_name='Types'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='institution',
            name='legal_form',
            field=models.ForeignKey(related_name='legal_form_institution', verbose_name='Legal form', blank=True, to='institutions.LegalForm', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='institution',
            name='parent',
            field=models.ForeignKey(verbose_name='Member of', blank=True, to='institutions.Institution', null=True),
            preserve_default=True,
        ),
    ]
