#!/usr/bin/python
"""
Better Slugify
Enhancement of Django's slugify function

Sponsored by Webrunners GmbH <http://www.webrunners.de>
Stopword list by http://www.ranks.nl/resources/stopwords.html

:author: Christoph von Krüchten <c.vonkruechten@webrunners.de>
:date: 03.11.2010
:version: $Id$
"""

import logging

from django.conf import settings
from django.template.defaultfilters import slugify as django_slugify
from django.utils.encoding import force_str

logger = logging.getLogger("betterslugify")

stopwords = {
    "de": [
        "aber",
        "als",
        "am",
        "an",
        "auch",
        "auf",
        "aus",
        "bei",
        "bin",
        "bis",
        "ist",
        "da",
        "dadurch",
        "daher",
        "darum",
        "das",
        "dass",
        "dein",
        "deine",
        "dem",
        "den",
        "der",
        "des",
        "dessen",
        "deshalb",
        "die",
        "dies",
        "dieser",
        "dieses",
        "doch",
        "dort",
        "du",
        "durch",
        "ein",
        "eine",
        "einem",
        "einen",
        "einer",
        "eines",
        "er",
        "es",
        "euer",
        "eure",
        "für",
        "hatte",
        "hatten",
        "hattest",
        "hattet",
        "hier",
        "hinter",
        "ich",
        "ihr",
        "ihre",
        "im",
        "in",
        "ist",
        "ja",
        "jede",
        "jedem",
        "jeden",
        "jeder",
        "jedes",
        "jener",
        "jenes",
        "jetzt",
        "kann",
        "kannst",
        "können",
        "könnt",
        "machen",
        "mal",
        "mein",
        "meine",
        "mit",
        "muss",
        "mußt",
        "musst",
        "müssen",
        "müsst",
        "nach",
        "nachdem",
        "nein",
        "nicht",
        "nun",
        "oder",
        "seid",
        "sein",
        "seine",
        "sich",
        "sie",
        "sind",
        "soll",
        "sollen",
        "sollst",
        "sollt",
        "sonst",
        "soweit",
        "sowie",
        "und",
        "unser",
        "unsere",
        "unter",
        "vom",
        "von",
        "vor",
        "wann",
        "warum",
        "was",
        "weiter",
        "weitere",
        "wenn",
        "wer",
        "werde",
        "werden",
        "werdet",
        "weshalb",
        "wie",
        "wieder",
        "wieso",
        "wir",
        "wird",
        "wirst",
        "wo",
        "woher",
        "wohin",
        "zu",
        "zum",
        "zur",
        "über",
    ],
    "en": [
        "a",
        "about",
        "above",
        "after",
        "again",
        "against",
        "all",
        "am",
        "an",
        "and",
        "any",
        "are",
        "aren't",
        "as",
        "at",
        "be",
        "because",
        "been",
        "before",
        "being",
        "below",
        "between",
        "both",
        "but",
        "by",
        "can't",
        "cannot",
        "could",
        "couldn't",
        "did",
        "didn't",
        "do",
        "does",
        "doesn't",
        "doing",
        "don't",
        "down",
        "during",
        "each",
        "few",
        "for",
        "from",
        "further",
        "had",
        "hadn't",
        "has",
        "hasn't",
        "have",
        "haven't",
        "having",
        "he",
        "he'd",
        "he'll",
        "he's",
        "her",
        "here",
        "here's",
        "hers",
        "herself",
        "him",
        "himself",
        "his",
        "how",
        "how's",
        "i",
        "i'd",
        "i'll",
        "i'm",
        "i've",
        "if",
        "in",
        "into",
        "is",
        "isn't",
        "it",
        "it's",
        "its",
        "itself",
        "let's",
        "me",
        "more",
        "most",
        "mustn't",
        "my",
        "myself",
        "no",
        "nor",
        "not",
        "of",
        "off",
        "on",
        "once",
        "only",
        "or",
        "other",
        "ought",
        "our",
        "ours",
        "ourselves",
        "out",
        "over",
        "own",
        "same",
        "shan't",
        "she",
        "she'd",
        "she'll",
        "she's",
        "should",
        "shouldn't",
        "so",
        "some",
        "such",
        "than",
        "that",
        "that's",
        "the",
        "their",
        "theirs",
        "them",
        "themselves",
        "then",
        "there",
        "there's",
        "these",
        "they",
        "they'd",
        "they'll",
        "they're",
        "they've",
        "this",
        "those",
        "through",
        "to",
        "too",
        "under",
        "until",
        "up",
        "very",
        "was",
        "wasn't",
        "we",
        "we'd",
        "we'll",
        "we're",
        "we've",
        "were",
        "weren't",
        "what",
        "what's",
        "when",
        "when's",
        "where",
        "where's",
        "which",
        "while",
        "who",
        "who's",
        "whom",
        "why",
        "why's",
        "with",
        "won't",
        "would",
        "wouldn't",
        "you",
        "you'd",
        "you'll",
        "you're",
        "you've",
        "your",
        "yours",
        "yourself",
        "yourselves",
    ],
    "fr": [
        "alors",
        "au",
        "aucuns",
        "aussi",
        "autre",
        "avant",
        "avec",
        "avoir",
        "bon",
        "car",
        "ce",
        "cela",
        "ces",
        "ceux",
        "chaque",
        "ci",
        "comme",
        "comment",
        "dans",
        "des",
        "du",
        "dedans",
        "dehors",
        "depuis",
        "deux",
        "devrait",
        "doit",
        "donc",
        "dos",
        "droite",
        "début",
        "elle",
        "elles",
        "en",
        "encore",
        "essai",
        "est",
        "et",
        "eu",
        "fait",
        "faites",
        "fois",
        "font",
        "force",
        "haut",
        "hors",
        "ici",
        "il",
        "ils",
        "je",
        "juste",
        "la",
        "le",
        "les",
        "leur",
        "là",
        "ma",
        "maintenant",
        "mais",
        "mes",
        "mine",
        "moins",
        "mon",
        "mot",
        "même",
        "ni",
        "nommés",
        "notre",
        "nous",
        "nouveaux",
        "ou",
        "où",
        "par",
        "parce",
        "parole",
        "pas",
        "personnes",
        "peut",
        "peu",
        "pièce",
        "plupart",
        "pour",
        "pourquoi",
        "quand",
        "que",
        "quel",
        "quelle",
        "quelles",
        "quels",
        "qui",
        "sa",
        "sans",
        "ses",
        "seulement",
        "si",
        "sien",
        "son",
        "sont",
        "sous",
        "soyez",
        "sujet",
        "sur",
        "ta",
        "tandis",
        "tellement",
        "tels",
        "tes",
        "ton",
        "tous",
        "tout",
        "trop",
        "très",
        "tu",
        "valeur",
        "voie",
        "voient",
        "vont",
        "votre",
        "vous",
        "vu",
        "ça",
        "étaient",
        "état",
        "étions",
        "été",
        "être",
    ],
}

umlauts = {
    "ä": "ae",
    "ö": "oe",
    "ü": "ue",
    "ß": "ss",
    "Ä": "Ae",
    "Ö": "Oe",
    "Ü": "Ue",
}


def better_slugify(value, remove_stopwords=True, slugify=True, max_words=None):
    """
    Better slugify

    Enhancement of Django's own slugify function. Retains readability by replacing Umlaut characters
    with standard ascii chars, shortens length, removes stopwords

    Arguments:
        value - string - The String to slugify
        remove_stopwords - boolean - Remove frequently used words. For a list see stopwords Dict
        slugify - boolean - Call Django's slugify function afterwards?
        max_words - int - Number of words that are allowed. Longer strings will be shortened
    """
    value = force_str(value)

    lang = settings.LANGUAGE_CODE.lower()

    logger.debug("Slugifying '%s', language: %s" % (value, lang))

    # remove stopwords
    if remove_stopwords and lang in stopwords:
        words = value.split()
        value = " ".join([w for w in words if w not in stopwords[lang]])

    # reduce to max_words
    if not max_words is None:
        value = " ".join(value.split()[:max_words])

    # replace umlauts
    for umlaut, replacement in umlauts.items():
        value = force_str(value.replace(umlaut, replacement))

    # and slugify
    if slugify:
        value = django_slugify(value)

    logger.debug("Slugified: %s" % value)

    return value
