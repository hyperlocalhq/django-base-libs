# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import filebrowser.fields
import django.db.models.deletion
from django.conf import settings
import base_libs.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('locations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('people', '0001_initial'),
        ('sponsors', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('title', models.CharField(verbose_name='Title', max_length=255, null=True, editable=False)),
                ('description', models.TextField(default=b'', verbose_name='Description', null=True, editable=False, blank=True)),
                ('teaser', models.TextField(default=b'', verbose_name='Teaser', null=True, editable=False, blank=True)),
                ('street_address', models.CharField(max_length=255, verbose_name='Street address', blank=True)),
                ('street_address2', models.CharField(max_length=255, verbose_name='Street address (second line)', blank=True)),
                ('postal_code', models.CharField(max_length=255, verbose_name='Postal code', blank=True)),
                ('city', models.CharField(default=b'Berlin', max_length=255, verbose_name='City', blank=True)),
                ('latitude', models.FloatField(help_text='Latitude (Lat.) is the angle between any point and the equator (north pole is at 90; south pole is at -90).', null=True, verbose_name='Latitude', blank=True)),
                ('longitude', models.FloatField(help_text='Longitude (Long.) is the angle east or west of an arbitrary point on Earth from Greenwich (UK), which is the international zero-longitude point (longitude=0 degrees). The anti-meridian of Greenwich is both 180 (direction to east) and -180 (direction to west).', null=True, verbose_name='Longitude', blank=True)),
                ('contact_name', models.CharField(max_length=255, verbose_name='Contact Name', blank=True)),
                ('phone_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('phone_area', models.CharField(max_length=6, verbose_name='Area Code', blank=True)),
                ('phone_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('fax_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('fax_area', models.CharField(max_length=6, verbose_name='Area Code', blank=True)),
                ('fax_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('email', models.EmailField(max_length=255, verbose_name='Email', blank=True)),
                ('website', base_libs.models.fields.URLField(verbose_name=b'Website', blank=True)),
                ('newsletter', models.BooleanField(default=False, verbose_name='Show in newsletter')),
                ('status', models.CharField(default=b'draft', max_length=20, verbose_name='Status', blank=True, choices=[(b'draft', 'Draft'), (b'published', 'Published'), (b'not_listed', 'Not Listed'), (b'import', 'Imported'), (b'trashed', 'Trashed')])),
                ('title_de', models.CharField(max_length=255, verbose_name='Title')),
                ('title_en', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('description_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('description_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('teaser_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Teaser', blank=True)),
                ('teaser_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('teaser_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Teaser', blank=True)),
                ('teaser_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('creator', models.ForeignKey(related_name='department_creator', on_delete=django.db.models.deletion.SET_NULL, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='creator')),
                ('districts', models.ManyToManyField(to='locations.District', verbose_name='District', blank=True)),
                ('location', models.ForeignKey(verbose_name='Location', to='locations.Location')),
                ('modifier', models.ForeignKey(related_name='department_modifier', on_delete=django.db.models.deletion.SET_NULL, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='modifier')),
            ],
            options={
                'ordering': ['title'],
                'verbose_name': 'Education department',
                'verbose_name_plural': 'Education departments',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DepartmentMember',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('function', models.CharField(verbose_name='Function', max_length=255, null=True, editable=False, blank=True)),
                ('phone_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('phone_area', models.CharField(max_length=6, verbose_name='Area Code', blank=True)),
                ('phone_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('email', models.EmailField(max_length=255, verbose_name='Email', blank=True)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort order')),
                ('function_de', models.CharField(max_length=255, verbose_name='Function', blank=True)),
                ('function_en', models.CharField(max_length=255, verbose_name='Function', blank=True)),
                ('department', models.ForeignKey(verbose_name='Department', to='education.Department')),
                ('person', models.ForeignKey(verbose_name='Person', blank=True, to='people.Person', null=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'verbose_name': 'Department team member',
                'verbose_name_plural': 'Department team members',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('path', filebrowser.fields.FileBrowseField(help_text='A path to a locally stored image.', max_length=255, verbose_name='File path')),
                ('copyright_restrictions', models.CharField(blank=True, max_length=20, verbose_name='Copyright restrictions', choices=[(b'general_use', 'Released for general use'), (b'protected', 'Released for this and own site only')])),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('department', models.ForeignKey(verbose_name='Department', to='education.Department')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PDF',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('path', filebrowser.fields.FileBrowseField(help_text='A path to a locally stored PDF file.', max_length=255, verbose_name='File path')),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('department', models.ForeignKey(verbose_name='Department', to='education.Department')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'PDF',
                'verbose_name_plural': 'PDFs',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('title', models.CharField(verbose_name='Title', max_length=255, null=True, editable=False)),
                ('subtitle', models.CharField(verbose_name='Subtitle', max_length=255, null=True, editable=False, blank=True)),
                ('description', models.TextField(default=b'', verbose_name='Description', null=True, editable=False, blank=True)),
                ('location_title', models.CharField(max_length=255, verbose_name='Location title', blank=True)),
                ('street_address', models.CharField(max_length=255, verbose_name='Street address', blank=True)),
                ('street_address2', models.CharField(max_length=255, verbose_name='Street address (second line)', blank=True)),
                ('postal_code', models.CharField(max_length=255, verbose_name='Postal code', blank=True)),
                ('city', models.CharField(default=b'Berlin', max_length=255, verbose_name='City', blank=True)),
                ('latitude', models.FloatField(help_text='Latitude (Lat.) is the angle between any point and the equator (north pole is at 90; south pole is at -90).', null=True, verbose_name='Latitude', blank=True)),
                ('longitude', models.FloatField(help_text='Longitude (Long.) is the angle east or west of an arbitrary point on Earth from Greenwich (UK), which is the international zero-longitude point (longitude=0 degrees). The anti-meridian of Greenwich is both 180 (direction to east) and -180 (direction to west).', null=True, verbose_name='Longitude', blank=True)),
                ('contact_department', models.CharField(max_length=255, verbose_name='Contact Department', blank=True)),
                ('contact_name', models.CharField(max_length=255, verbose_name='Contact Name', blank=True)),
                ('phone_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('phone_area', models.CharField(max_length=6, verbose_name='Area Code', blank=True)),
                ('phone_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('fax_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('fax_area', models.CharField(max_length=6, verbose_name='Area Code', blank=True)),
                ('fax_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('email', models.EmailField(max_length=255, verbose_name='Email', blank=True)),
                ('website', base_libs.models.fields.URLField(verbose_name=b'Website', blank=True)),
                ('age_from', models.PositiveSmallIntegerField(null=True, verbose_name='Age from', blank=True)),
                ('age_till', models.PositiveSmallIntegerField(null=True, verbose_name='Age till', blank=True)),
                ('participant_count', models.TextField(default=b'', verbose_name='Participant count', null=True, editable=False, blank=True)),
                ('needs_teachers', models.BooleanField(default=False, verbose_name='Project needs teachers')),
                ('prices', models.TextField(default=b'', verbose_name='Prices', null=True, editable=False, blank=True)),
                ('free_entrance', models.BooleanField(default=False, verbose_name='Free entrance')),
                ('tickets_website', base_libs.models.fields.URLField(max_length=255, verbose_name='Tickets website', blank=True)),
                ('special_conditions', models.TextField(default=b'', verbose_name='Special conditions', null=True, editable=False, blank=True)),
                ('remarks', models.TextField(default=b'', verbose_name='Remarks', null=True, editable=False, blank=True)),
                ('cooperation', models.TextField(default=b'', verbose_name='Cooperation partners', null=True, editable=False, blank=True)),
                ('supporters', models.TextField(default=b'', verbose_name='Supporters', null=True, editable=False, blank=True)),
                ('newsletter', models.BooleanField(default=False, verbose_name='Show in newsletter')),
                ('status', models.CharField(default=b'draft', max_length=20, verbose_name='Status', blank=True, choices=[(b'draft', 'Draft'), (b'published', 'Published'), (b'not_listed', 'Not Listed'), (b'import', 'Imported'), (b'trashed', 'Trashed')])),
                ('subtitle_de', models.CharField(max_length=255, verbose_name='Subtitle', blank=True)),
                ('subtitle_en', models.CharField(max_length=255, verbose_name='Subtitle', blank=True)),
                ('remarks_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Anmerkungen', blank=True)),
                ('remarks_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('remarks_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Anmerkungen', blank=True)),
                ('remarks_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('supporters_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Unterst\xfctzer', blank=True)),
                ('supporters_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('supporters_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Unterst\xfctzer', blank=True)),
                ('supporters_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('title_de', models.CharField(max_length=255, verbose_name='Title')),
                ('title_en', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('cooperation_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Kooperationspartner', blank=True)),
                ('cooperation_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('cooperation_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Kooperationspartner', blank=True)),
                ('cooperation_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('description_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('description_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('participant_count_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Teilnehmerzahl', blank=True)),
                ('participant_count_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('participant_count_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Teilnehmerzahl', blank=True)),
                ('participant_count_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('special_conditions_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Besonderheiten', blank=True)),
                ('special_conditions_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('special_conditions_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Besonderheiten', blank=True)),
                ('special_conditions_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('prices_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Preise', blank=True)),
                ('prices_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('prices_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Preise', blank=True)),
                ('prices_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('creator', models.ForeignKey(related_name='project_creator', on_delete=django.db.models.deletion.SET_NULL, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='creator')),
                ('departments', models.ManyToManyField(related_name='department_projects', verbose_name='Educational departments', to='education.Department', blank=True)),
            ],
            options={
                'ordering': ['-creation_date'],
                'verbose_name': 'Educational project',
                'verbose_name_plural': 'Educational projects',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectFormat',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('title', models.CharField(verbose_name='Title', max_length=200, null=True, editable=False)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort Order')),
                ('title_de', models.CharField(max_length=200, verbose_name='Title')),
                ('title_en', models.CharField(max_length=200, verbose_name='Title', blank=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'verbose_name': 'Project format',
                'verbose_name_plural': 'Project formats',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectImage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('path', filebrowser.fields.FileBrowseField(help_text='A path to a locally stored image.', max_length=255, verbose_name='File path')),
                ('copyright_restrictions', models.CharField(blank=True, max_length=20, verbose_name='Copyright restrictions', choices=[(b'general_use', 'Released for general use'), (b'protected', 'Released for this and own site only')])),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('project', models.ForeignKey(verbose_name='Project', to='education.Project')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectMember',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('function', models.CharField(verbose_name='Function', max_length=255, null=True, editable=False, blank=True)),
                ('phone_country', models.CharField(default=b'49', max_length=4, verbose_name='Country Code', blank=True)),
                ('phone_area', models.CharField(max_length=6, verbose_name='Area Code', blank=True)),
                ('phone_number', models.CharField(max_length=25, verbose_name='Subscriber Number and Extension', blank=True)),
                ('email', models.EmailField(max_length=255, verbose_name='Email', blank=True)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort order')),
                ('function_de', models.CharField(max_length=255, verbose_name='Function', blank=True)),
                ('function_en', models.CharField(max_length=255, verbose_name='Function', blank=True)),
                ('person', models.ForeignKey(verbose_name='Person', blank=True, to='people.Person', null=True)),
                ('project', models.ForeignKey(verbose_name='Project', to='education.Project')),
            ],
            options={
                'ordering': ['sort_order'],
                'verbose_name': 'Project team member',
                'verbose_name_plural': 'Project team members',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectPDF',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('path', filebrowser.fields.FileBrowseField(help_text='A path to a locally stored PDF file.', max_length=255, verbose_name='File path')),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('project', models.ForeignKey(verbose_name='Project', to='education.Project')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'PDF',
                'verbose_name_plural': 'PDFs',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectSocialMediaChannel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('channel_type', models.CharField(help_text='e.g. twitter, facebook, etc.', max_length=255, verbose_name='Social media type')),
                ('url', base_libs.models.fields.URLField(max_length=255, verbose_name='URL')),
                ('project', models.ForeignKey(to='education.Project')),
            ],
            options={
                'ordering': ['channel_type'],
                'verbose_name': 'Social media channel',
                'verbose_name_plural': 'Social media channels',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectSponsor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('title', models.CharField(verbose_name='Title', max_length=255, null=True, editable=False, blank=True)),
                ('image', filebrowser.fields.FileBrowseField(help_text='A path to a locally stored image.', max_length=255, verbose_name='Image', blank=True)),
                ('website', base_libs.models.fields.URLField(verbose_name='Website', blank=True)),
                ('title_de', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('title_en', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('project', models.ForeignKey(verbose_name='Project', to='education.Project')),
            ],
            options={
                'ordering': ['title'],
                'verbose_name': 'Sponsor',
                'verbose_name_plural': 'Sponsors',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectTargetGroup',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('title', models.CharField(verbose_name='Title', max_length=200, null=True, editable=False)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort Order')),
                ('title_de', models.CharField(max_length=200, verbose_name='Title')),
                ('title_en', models.CharField(max_length=200, verbose_name='Title', blank=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'verbose_name': 'Project target group',
                'verbose_name_plural': 'Project target groups',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectTime',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('start', models.DateTimeField(verbose_name='Start date and time')),
                ('end', models.DateTimeField(null=True, verbose_name='End date and time', blank=True)),
                ('creator', models.ForeignKey(related_name='projecttime_creator', on_delete=django.db.models.deletion.SET_NULL, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='creator')),
                ('modifier', models.ForeignKey(related_name='projecttime_modifier', on_delete=django.db.models.deletion.SET_NULL, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='modifier')),
                ('project', models.ForeignKey(verbose_name='Project', to='education.Project')),
            ],
            options={
                'ordering': ['start'],
                'verbose_name': 'Project time',
                'verbose_name_plural': 'Project times',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectVideo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('title', models.CharField(verbose_name='Title', max_length=255, null=True, editable=False)),
                ('link_or_embed', models.TextField(verbose_name='Link or embed code')),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('title_de', models.CharField(max_length=255, verbose_name='Title')),
                ('title_en', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('project', models.ForeignKey(verbose_name='Project', to='education.Project')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'Video/Audio',
                'verbose_name_plural': 'Videos/Audios',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SocialMediaChannel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('channel_type', models.CharField(help_text='e.g. twitter, facebook, etc.', max_length=255, verbose_name='Social media type')),
                ('url', base_libs.models.fields.URLField(max_length=255, verbose_name='URL')),
                ('department', models.ForeignKey(to='education.Department')),
            ],
            options={
                'ordering': ['channel_type'],
                'verbose_name': 'Social media channel',
                'verbose_name_plural': 'Social media channels',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='project',
            name='formats',
            field=models.ManyToManyField(to='education.ProjectFormat', null=True, verbose_name='Project formats', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='project',
            name='modifier',
            field=models.ForeignKey(related_name='project_modifier', on_delete=django.db.models.deletion.SET_NULL, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='modifier'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='project',
            name='sponsors',
            field=models.ManyToManyField(to='sponsors.Sponsor', verbose_name='Sponsors', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='project',
            name='target_groups',
            field=models.ManyToManyField(to='education.ProjectTargetGroup', null=True, verbose_name='Target groups', blank=True),
            preserve_default=True,
        ),
    ]
