# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import mptt.fields
import filebrowser.fields
import django.db.models.deletion
from django.conf import settings
import base_libs.models.fields


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('external_services', '__first__'),
        ('festivals', '0001_initial'),
        ('people', '0001_initial'),
        ('locations', '0001_initial'),
        ('sponsors', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('start_date', models.DateField(verbose_name='Start date')),
                ('end_date', models.DateField(null=True, verbose_name='End date', blank=True)),
                ('start_time', models.TimeField(null=True, verbose_name='Start time', blank=True)),
                ('end_time', models.TimeField(null=True, verbose_name='End time', blank=True)),
                ('duration', models.PositiveIntegerField(null=True, verbose_name='Duration in seconds', blank=True)),
                ('pauses', models.PositiveIntegerField(null=True, verbose_name='Pauses', blank=True)),
                ('location_title', models.CharField(max_length=255, verbose_name='Location title', blank=True)),
                ('street_address', models.CharField(max_length=255, verbose_name='Street address', blank=True)),
                ('street_address2', models.CharField(max_length=255, verbose_name='Street address (second line)', blank=True)),
                ('postal_code', models.CharField(max_length=255, verbose_name='Postal code', blank=True)),
                ('city', models.CharField(default=b'Berlin', max_length=255, verbose_name='City', blank=True)),
                ('latitude', models.FloatField(help_text='Latitude (Lat.) is the angle between any point and the equator (north pole is at 90; south pole is at -90).', null=True, verbose_name='Latitude', blank=True)),
                ('longitude', models.FloatField(help_text='Longitude (Long.) is the angle east or west of an arbitrary point on Earth from Greenwich (UK), which is the international zero-longitude point (longitude=0 degrees). The anti-meridian of Greenwich is both 180 (direction to east) and -180 (direction to west).', null=True, verbose_name='Longitude', blank=True)),
                ('organizers', models.CharField(max_length=255, verbose_name='Organizers', blank=True)),
                ('description', models.TextField(default=b'', verbose_name='Description', null=True, editable=False, blank=True)),
                ('teaser', models.TextField(default=b'', verbose_name='Teaser', null=True, editable=False, blank=True)),
                ('work_info', models.TextField(default=b'', verbose_name='Work info', null=True, editable=False, blank=True)),
                ('contents', models.TextField(default=b'', verbose_name='Contents', null=True, editable=False, blank=True)),
                ('press_text', models.TextField(default=b'', verbose_name='Press text', null=True, editable=False, blank=True)),
                ('credits', models.TextField(default=b'', verbose_name='Credits', null=True, editable=False, blank=True)),
                ('concert_program', models.TextField(default=b'', verbose_name='Concert program', null=True, editable=False, blank=True)),
                ('supporting_program', models.TextField(default=b'', verbose_name='Supporting program', null=True, editable=False, blank=True)),
                ('remarks', models.TextField(default=b'', verbose_name='Remarks', null=True, editable=False, blank=True)),
                ('duration_text', models.CharField(verbose_name='Duration text', max_length=255, null=True, editable=False, blank=True)),
                ('subtitles_text', models.CharField(verbose_name='Subtitles text', max_length=255, null=True, editable=False, blank=True)),
                ('age_text', models.CharField(verbose_name='Age text', max_length=255, null=True, editable=False, blank=True)),
                ('event_status', models.CharField(blank=True, max_length=20, verbose_name='Event status', choices=[(b'takes_place', 'Takes place'), (b'canceled', 'Canceled'), (b'trashed', 'Trashed')])),
                ('ticket_status', models.CharField(blank=True, max_length=20, verbose_name='Ticket status', choices=[(b'tickets_@_box_office', 'Tickets at the box office'), (b'sold_out', 'Sold out')])),
                ('free_entrance', models.BooleanField(default=False, verbose_name='Free entrance')),
                ('price_from', models.DecimalField(null=True, verbose_name='Price from (\u20ac). Separate cents by a point.', max_digits=5, decimal_places=2, blank=True)),
                ('price_till', models.DecimalField(null=True, verbose_name='Price till (\u20ac). Separate cents by a point.', max_digits=5, decimal_places=2, blank=True)),
                ('tickets_website', base_libs.models.fields.URLField(max_length=255, verbose_name='Tickets website', blank=True)),
                ('price_information', models.TextField(default=b'', verbose_name='Additional price information', null=True, editable=False, blank=True)),
                ('other_characteristics', models.TextField(default=b'', verbose_name='Other characteristics', null=True, editable=False, blank=True)),
                ('classiccard', models.BooleanField(default=False, verbose_name='Intended for ClassicCard holders')),
                ('age_text_de', models.CharField(max_length=255, verbose_name='Age text', blank=True)),
                ('age_text_en', models.CharField(max_length=255, verbose_name='Age text', blank=True)),
                ('supporting_program_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Rahmenprogramm', blank=True)),
                ('supporting_program_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('supporting_program_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Rahmenprogramm', blank=True)),
                ('supporting_program_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('contents_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Inhaltsangabe', blank=True)),
                ('contents_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('contents_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Inhaltsangabe', blank=True)),
                ('contents_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('press_text_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Pressestimmen', blank=True)),
                ('press_text_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('press_text_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Pressestimmen', blank=True)),
                ('press_text_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('subtitles_text_de', models.CharField(max_length=255, verbose_name='Subtitles text', blank=True)),
                ('subtitles_text_en', models.CharField(max_length=255, verbose_name='Subtitles text', blank=True)),
                ('description_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('description_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('duration_text_de', models.CharField(max_length=255, verbose_name='Duration text', blank=True)),
                ('duration_text_en', models.CharField(max_length=255, verbose_name='Duration text', blank=True)),
                ('credits_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Produktionscredits', blank=True)),
                ('credits_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('credits_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Produktionscredits', blank=True)),
                ('credits_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('teaser_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Teaser', blank=True)),
                ('teaser_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('teaser_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Teaser', blank=True)),
                ('teaser_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('remarks_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Anmerkungen', blank=True)),
                ('remarks_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('remarks_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Anmerkungen', blank=True)),
                ('remarks_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('work_info_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Werkinfo', blank=True)),
                ('work_info_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('work_info_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Werkinfo', blank=True)),
                ('work_info_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('other_characteristics_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Weitere Merkmale', blank=True)),
                ('other_characteristics_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('other_characteristics_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Weitere Merkmale', blank=True)),
                ('other_characteristics_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('price_information_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Zus\xe4tzliche Preisinformation', blank=True)),
                ('price_information_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('price_information_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Zus\xe4tzliche Preisinformation', blank=True)),
                ('price_information_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('concert_program_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Konzertprogramm', blank=True)),
                ('concert_program_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('concert_program_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Konzertprogramm', blank=True)),
                ('concert_program_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
            ],
            options={
                'ordering': ['start_date', 'start_time'],
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EventAuthorship',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('work_title', models.CharField(max_length=255, verbose_name='Work title', blank=True)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort order')),
                ('imported_sort_order', models.IntegerField(default=0, verbose_name='Imported sort order')),
                ('authorship_type', models.ForeignKey(verbose_name='Type', to='people.AuthorshipType')),
                ('event', models.ForeignKey(verbose_name='Event', to='productions.Event')),
                ('person', models.ForeignKey(verbose_name='Person', blank=True, to='people.Person', null=True)),
            ],
            options={
                'ordering': ['person__last_name', 'person__first_name'],
                'verbose_name': 'Authorship',
                'verbose_name_plural': 'Authorships',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EventCharacteristics',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('title', models.CharField(verbose_name='Title', max_length=200, null=True, editable=False)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort Order')),
                ('show_as_main_category', models.BooleanField(default=False, verbose_name='Show as main category')),
                ('title_de', models.CharField(max_length=200, verbose_name='Title')),
                ('title_en', models.CharField(max_length=200, verbose_name='Title', blank=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'verbose_name': 'Event Characteristics',
                'verbose_name_plural': 'Event Characteristics',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EventImage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('path', filebrowser.fields.FileBrowseField(help_text='A path to a locally stored image.', max_length=255, verbose_name='File path')),
                ('copyright_restrictions', models.CharField(blank=True, max_length=20, verbose_name='Copyright restrictions', choices=[(b'general_use', 'Released for general use'), (b'protected', 'Released for this and own site only'), (b'promotional', 'Released for promotional reasons')])),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('event', models.ForeignKey(verbose_name='Event', to='productions.Event')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EventInvolvement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('another_type', models.CharField(verbose_name='Another type', max_length=255, null=True, editable=False, blank=True)),
                ('involvement_role', models.CharField(verbose_name='Role', max_length=255, null=True, editable=False, blank=True)),
                ('involvement_instrument', models.CharField(verbose_name='Instrument', max_length=255, null=True, editable=False, blank=True)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort order')),
                ('imported_sort_order', models.IntegerField(default=0, verbose_name='Imported sort order')),
                ('another_type_de', models.CharField(max_length=255, verbose_name='Another type', blank=True)),
                ('another_type_en', models.CharField(max_length=255, verbose_name='Another type', blank=True)),
                ('involvement_role_de', models.CharField(max_length=255, verbose_name='Role', blank=True)),
                ('involvement_role_en', models.CharField(max_length=255, verbose_name='Role', blank=True)),
                ('involvement_instrument_de', models.CharField(max_length=255, verbose_name='Instrument', blank=True)),
                ('involvement_instrument_en', models.CharField(max_length=255, verbose_name='Instrument', blank=True)),
                ('event', models.ForeignKey(verbose_name='Event', to='productions.Event')),
                ('involvement_type', models.ForeignKey(verbose_name='Type', blank=True, to='people.InvolvementType', null=True)),
                ('person', models.ForeignKey(verbose_name='Person', blank=True, to='people.Person', null=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'verbose_name': 'Involvement',
                'verbose_name_plural': 'Involvements',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EventLeadership',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('function', models.CharField(verbose_name='Function', max_length=255, null=True, editable=False, blank=True)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort order')),
                ('imported_sort_order', models.IntegerField(default=0, verbose_name='Imported sort order')),
                ('function_de', models.CharField(max_length=255, verbose_name='Function', blank=True)),
                ('function_en', models.CharField(max_length=255, verbose_name='Function', blank=True)),
                ('event', models.ForeignKey(verbose_name='Event', to='productions.Event')),
                ('person', models.ForeignKey(verbose_name='Person', blank=True, to='people.Person', null=True)),
            ],
            options={
                'ordering': ['person__last_name', 'person__first_name'],
                'verbose_name': 'Leadership',
                'verbose_name_plural': 'Leaderships',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EventLiveStream',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('title', models.CharField(verbose_name='Title', max_length=255, null=True, editable=False)),
                ('link_or_embed', models.TextField(verbose_name='Link or embed code')),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('title_de', models.CharField(max_length=255, verbose_name='Title')),
                ('title_en', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('event', models.ForeignKey(verbose_name='Event', to='productions.Event')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'Live Stream',
                'verbose_name_plural': 'Live Streams',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EventPDF',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('path', filebrowser.fields.FileBrowseField(help_text='A path to a locally stored PDF file.', max_length=255, verbose_name='File path')),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('event', models.ForeignKey(verbose_name='Event', to='productions.Event')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'PDF',
                'verbose_name_plural': 'PDFs',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EventSocialMediaChannel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('channel_type', models.CharField(help_text='e.g. twitter, facebook, etc.', max_length=255, verbose_name='Social media type')),
                ('url', base_libs.models.fields.URLField(max_length=255, verbose_name='URL')),
                ('event', models.ForeignKey(to='productions.Event')),
            ],
            options={
                'ordering': ['channel_type'],
                'verbose_name': 'Social media channel',
                'verbose_name_plural': 'Social media channels',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EventSponsor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('title', models.CharField(verbose_name='Title', max_length=255, null=True, editable=False, blank=True)),
                ('image', filebrowser.fields.FileBrowseField(help_text='A path to a locally stored image.', max_length=255, verbose_name='Image', blank=True)),
                ('website', base_libs.models.fields.URLField(verbose_name='Website', blank=True)),
                ('title_de', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('title_en', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('event', models.ForeignKey(verbose_name='Event', to='productions.Event')),
            ],
            options={
                'ordering': ['title'],
                'verbose_name': 'Sponsor',
                'verbose_name_plural': 'Sponsors',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EventVideo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('title', models.CharField(verbose_name='Title', max_length=255, null=True, editable=False)),
                ('link_or_embed', models.TextField(verbose_name='Link or embed code')),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('title_de', models.CharField(max_length=255, verbose_name='Title')),
                ('title_en', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('event', models.ForeignKey(verbose_name='Event', to='productions.Event')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'Video',
                'verbose_name_plural': 'Videos',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LanguageAndSubtitles',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('title', models.CharField(verbose_name='Title', max_length=200, null=True, editable=False)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort Order')),
                ('title_de', models.CharField(max_length=200, verbose_name='Title')),
                ('title_en', models.CharField(max_length=200, verbose_name='Title', blank=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'verbose_name': 'Language and Subtitles',
                'verbose_name_plural': 'Languages and Subtitles',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Production',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('prefix', models.CharField(verbose_name='Title prefix', max_length=255, null=True, editable=False, blank=True)),
                ('title', models.CharField(verbose_name='Title', max_length=255, null=True, editable=False, db_index=True)),
                ('subtitle', models.CharField(verbose_name='Subtitle', max_length=255, null=True, editable=False, blank=True)),
                ('original', models.CharField(verbose_name='Original title', max_length=255, null=True, editable=False, blank=True)),
                ('website', models.CharField(verbose_name='Production URL', max_length=255, null=True, editable=False, blank=True)),
                ('ensembles', models.CharField(max_length=255, verbose_name='Ensembles', blank=True)),
                ('organizers', models.CharField(max_length=255, verbose_name='Organizers', blank=True)),
                ('in_cooperation_with', models.CharField(max_length=255, verbose_name='In cooperation with', blank=True)),
                ('location_title', models.CharField(max_length=255, verbose_name='Location title', blank=True)),
                ('street_address', models.CharField(max_length=255, verbose_name='Street address', blank=True)),
                ('street_address2', models.CharField(max_length=255, verbose_name='Street address (second line)', blank=True)),
                ('postal_code', models.CharField(max_length=255, verbose_name='Postal code', blank=True)),
                ('city', models.CharField(default=b'Berlin', max_length=255, verbose_name='City', blank=True)),
                ('latitude', models.FloatField(help_text='Latitude (Lat.) is the angle between any point and the equator (north pole is at 90; south pole is at -90).', null=True, verbose_name='Latitude', blank=True)),
                ('longitude', models.FloatField(help_text='Longitude (Long.) is the angle east or west of an arbitrary point on Earth from Greenwich (UK), which is the international zero-longitude point (longitude=0 degrees). The anti-meridian of Greenwich is both 180 (direction to east) and -180 (direction to west).', null=True, verbose_name='Longitude', blank=True)),
                ('description', models.TextField(default=b'', verbose_name='Description', null=True, editable=False, blank=True)),
                ('teaser', models.TextField(default=b'', verbose_name='Teaser', null=True, editable=False, blank=True)),
                ('work_info', models.TextField(default=b'', verbose_name='Work info', null=True, editable=False, blank=True)),
                ('contents', models.TextField(default=b'', verbose_name='Contents', null=True, editable=False, blank=True)),
                ('press_text', models.TextField(default=b'', verbose_name='Press text', null=True, editable=False, blank=True)),
                ('credits', models.TextField(default=b'', verbose_name='Credits', null=True, editable=False, blank=True)),
                ('concert_program', models.TextField(default=b'', verbose_name='Concert program', null=True, editable=False, blank=True)),
                ('supporting_program', models.TextField(default=b'', verbose_name='Supporting program', null=True, editable=False, blank=True)),
                ('remarks', models.TextField(default=b'', verbose_name='Remarks', null=True, editable=False, blank=True)),
                ('duration_text', models.CharField(verbose_name='Duration text', max_length=255, null=True, editable=False, blank=True)),
                ('subtitles_text', models.CharField(verbose_name='Subtitles text', max_length=255, null=True, editable=False, blank=True)),
                ('age_text', models.CharField(verbose_name='Age text', max_length=255, null=True, editable=False, blank=True)),
                ('free_entrance', models.BooleanField(default=False, verbose_name='Free entrance')),
                ('price_from', models.DecimalField(null=True, verbose_name='Price from (\u20ac). Separate cents by a point.', max_digits=5, decimal_places=2, blank=True)),
                ('price_till', models.DecimalField(null=True, verbose_name='Price till (\u20ac). Separate cents by a point.', max_digits=5, decimal_places=2, blank=True)),
                ('tickets_website', base_libs.models.fields.URLField(max_length=255, verbose_name='Tickets website', blank=True)),
                ('price_information', models.TextField(default=b'', verbose_name='Additional price information', null=True, editable=False, blank=True)),
                ('other_characteristics', models.TextField(default=b'', verbose_name='Other characteristics', null=True, editable=False, blank=True)),
                ('age_from', models.PositiveSmallIntegerField(null=True, verbose_name='Age from', blank=True)),
                ('age_till', models.PositiveSmallIntegerField(null=True, verbose_name='Age till', blank=True)),
                ('edu_offer_website', base_libs.models.fields.URLField(max_length=255, verbose_name='Educational offer website', blank=True)),
                ('show_among_others', models.BooleanField(default=True, help_text='Should this production be shown in event details among other productions at the same venue?', verbose_name='Show among others')),
                ('no_overwriting', models.BooleanField(default=False, verbose_name='Do not overwrite by the next import')),
                ('classiccard', models.BooleanField(default=False, verbose_name='Intended for ClassicCard holders')),
                ('newsletter', models.BooleanField(default=False, verbose_name='Show in newsletter')),
                ('status', models.CharField(default=b'draft', max_length=20, verbose_name='Status', blank=True, choices=[(b'draft', 'Draft'), (b'published', 'Published'), (b'not_listed', 'Not Listed'), (b'import', 'Imported'), (b'expired', 'Expired'), (b'trashed', 'Trashed')])),
                ('start_date', models.DateField(verbose_name='Actual start date', null=True, editable=False, blank=True)),
                ('start_time', models.TimeField(verbose_name='Actual start time', null=True, editable=False, blank=True)),
                ('prefix_de', models.CharField(max_length=255, verbose_name='Title prefix', blank=True)),
                ('prefix_en', models.CharField(max_length=255, verbose_name='Title prefix', blank=True)),
                ('title_de', models.CharField(max_length=255, verbose_name='Title', db_index=True)),
                ('title_en', models.CharField(db_index=True, max_length=255, verbose_name='Title', blank=True)),
                ('work_info_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Werkinfo', blank=True)),
                ('work_info_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('work_info_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Werkinfo', blank=True)),
                ('work_info_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('price_information_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Zus\xe4tzliche Preisinformation', blank=True)),
                ('price_information_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('price_information_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Zus\xe4tzliche Preisinformation', blank=True)),
                ('price_information_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('supporting_program_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Rahmenprogramm', blank=True)),
                ('supporting_program_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('supporting_program_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Rahmenprogramm', blank=True)),
                ('supporting_program_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('subtitles_text_de', models.CharField(max_length=255, verbose_name='Subtitles text', blank=True)),
                ('subtitles_text_en', models.CharField(max_length=255, verbose_name='Subtitles text', blank=True)),
                ('duration_text_de', models.CharField(max_length=255, verbose_name='Duration text', blank=True)),
                ('duration_text_en', models.CharField(max_length=255, verbose_name='Duration text', blank=True)),
                ('credits_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Produktionscredits', blank=True)),
                ('credits_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('credits_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Produktionscredits', blank=True)),
                ('credits_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('concert_program_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Konzertprogramm', blank=True)),
                ('concert_program_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('concert_program_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Konzertprogramm', blank=True)),
                ('concert_program_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('age_text_de', models.CharField(max_length=255, verbose_name='Age text', blank=True)),
                ('age_text_en', models.CharField(max_length=255, verbose_name='Age text', blank=True)),
                ('subtitle_de', models.CharField(max_length=255, verbose_name='Subtitle', blank=True)),
                ('subtitle_en', models.CharField(max_length=255, verbose_name='Subtitle', blank=True)),
                ('press_text_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Pressestimmen', blank=True)),
                ('press_text_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('press_text_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Pressestimmen', blank=True)),
                ('press_text_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('website_de', models.CharField(max_length=255, verbose_name='Production URL', blank=True)),
                ('website_en', models.CharField(max_length=255, verbose_name='Production URL', blank=True)),
                ('teaser_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Teaser', blank=True)),
                ('teaser_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('teaser_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Teaser', blank=True)),
                ('teaser_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('contents_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Inhaltsangabe', blank=True)),
                ('contents_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('contents_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Inhaltsangabe', blank=True)),
                ('contents_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('description_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('description_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Beschreibung', blank=True)),
                ('description_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('remarks_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Anmerkungen', blank=True)),
                ('remarks_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('remarks_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Anmerkungen', blank=True)),
                ('remarks_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('other_characteristics_de', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Weitere Merkmale', blank=True)),
                ('other_characteristics_de_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('other_characteristics_en', base_libs.models.fields.ExtendedTextField(default=b'', null=True, verbose_name='Weitere Merkmale', blank=True)),
                ('other_characteristics_en_markup_type', models.CharField(default=b'pt', help_text='You can select an appropriate markup type here', max_length=10, verbose_name='Markup type', choices=[(b'hw', 'HTML WYSIWYG'), (b'pt', 'Plain Text'), (b'rh', 'Raw HTML'), (b'md', 'Markdown')])),
                ('original_de', models.CharField(max_length=255, verbose_name='Original title', blank=True)),
                ('original_en', models.CharField(max_length=255, verbose_name='Original title', blank=True)),
            ],
            options={
                'ordering': ['title'],
                'verbose_name': 'Production',
                'verbose_name_plural': 'Productions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductionAuthorship',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('work_title', models.CharField(max_length=255, verbose_name='Work title', blank=True)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort order')),
                ('imported_sort_order', models.IntegerField(default=0, verbose_name='Imported sort order')),
                ('authorship_type', models.ForeignKey(verbose_name='Type', to='people.AuthorshipType')),
                ('person', models.ForeignKey(verbose_name='Person', blank=True, to='people.Person', null=True)),
                ('production', models.ForeignKey(verbose_name='Production', to='productions.Production')),
            ],
            options={
                'ordering': ['person__last_name', 'person__first_name'],
                'verbose_name': 'Authorship',
                'verbose_name_plural': 'Authorships',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductionCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('title', models.CharField(verbose_name='Title', max_length=200, null=True, editable=False)),
                ('title_de', models.CharField(max_length=200, verbose_name='Title')),
                ('title_en', models.CharField(max_length=200, verbose_name='Title', blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name='children', blank=True, to='productions.ProductionCategory', null=True)),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductionCharacteristics',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('slug', models.SlugField(unique=True, max_length=255, verbose_name='Slug for URIs')),
                ('title', models.CharField(verbose_name='Title', max_length=200, null=True, editable=False)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort Order')),
                ('title_de', models.CharField(max_length=200, verbose_name='Title')),
                ('title_en', models.CharField(max_length=200, verbose_name='Title', blank=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'verbose_name': 'Production Characteristics',
                'verbose_name_plural': 'Production Characteristics',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductionImage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('path', filebrowser.fields.FileBrowseField(help_text='A path to a locally stored image.', max_length=255, verbose_name='File path')),
                ('copyright_restrictions', models.CharField(blank=True, max_length=20, verbose_name='Copyright restrictions', choices=[(b'general_use', 'Released for general use'), (b'protected', 'Released for this and own site only'), (b'promotional', 'Released for promotional reasons')])),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('production', models.ForeignKey(verbose_name='Production', to='productions.Production')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductionInvolvement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('another_type', models.CharField(verbose_name='Another type', max_length=255, null=True, editable=False, blank=True)),
                ('involvement_role', models.CharField(verbose_name='Role', max_length=255, null=True, editable=False, blank=True)),
                ('involvement_instrument', models.CharField(verbose_name='Instrument', max_length=255, null=True, editable=False, blank=True)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort order')),
                ('imported_sort_order', models.IntegerField(default=0, verbose_name='Imported sort order')),
                ('another_type_de', models.CharField(max_length=255, verbose_name='Another type', blank=True)),
                ('another_type_en', models.CharField(max_length=255, verbose_name='Another type', blank=True)),
                ('involvement_role_de', models.CharField(max_length=255, verbose_name='Role', blank=True)),
                ('involvement_role_en', models.CharField(max_length=255, verbose_name='Role', blank=True)),
                ('involvement_instrument_de', models.CharField(max_length=255, verbose_name='Instrument', blank=True)),
                ('involvement_instrument_en', models.CharField(max_length=255, verbose_name='Instrument', blank=True)),
                ('involvement_type', models.ForeignKey(verbose_name='Type', blank=True, to='people.InvolvementType', null=True)),
                ('person', models.ForeignKey(verbose_name='Person', blank=True, to='people.Person', null=True)),
                ('production', models.ForeignKey(verbose_name='Production', to='productions.Production')),
            ],
            options={
                'ordering': ['sort_order'],
                'verbose_name': 'Involvement',
                'verbose_name_plural': 'Involvements',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductionLeadership',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('function', models.CharField(verbose_name='Function', max_length=255, null=True, editable=False, blank=True)),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort order')),
                ('imported_sort_order', models.IntegerField(default=0, verbose_name='Imported sort order')),
                ('function_de', models.CharField(max_length=255, verbose_name='Function', blank=True)),
                ('function_en', models.CharField(max_length=255, verbose_name='Function', blank=True)),
                ('person', models.ForeignKey(verbose_name='Person', blank=True, to='people.Person', null=True)),
                ('production', models.ForeignKey(verbose_name='Production', to='productions.Production')),
            ],
            options={
                'ordering': ['person__last_name', 'person__first_name'],
                'verbose_name': 'Leadership',
                'verbose_name_plural': 'Leaderships',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductionLiveStream',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('title', models.CharField(verbose_name='Title', max_length=255, null=True, editable=False)),
                ('link_or_embed', models.TextField(verbose_name='Link or embed code')),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('title_de', models.CharField(max_length=255, verbose_name='Title')),
                ('title_en', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('production', models.ForeignKey(verbose_name='Production', to='productions.Production')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'Live Stream',
                'verbose_name_plural': 'Live Streams',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductionPDF',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('path', filebrowser.fields.FileBrowseField(help_text='A path to a locally stored PDF file.', max_length=255, verbose_name='File path')),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('production', models.ForeignKey(verbose_name='Production', to='productions.Production')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'PDF',
                'verbose_name_plural': 'PDFs',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductionSocialMediaChannel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('channel_type', models.CharField(help_text='e.g. twitter, facebook, etc.', max_length=255, verbose_name='Social media type')),
                ('url', base_libs.models.fields.URLField(max_length=255, verbose_name='URL')),
                ('production', models.ForeignKey(to='productions.Production')),
            ],
            options={
                'ordering': ['channel_type'],
                'verbose_name': 'Social media channel',
                'verbose_name_plural': 'Social media channels',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductionSponsor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('title', models.CharField(verbose_name='Title', max_length=255, null=True, editable=False, blank=True)),
                ('image', filebrowser.fields.FileBrowseField(help_text='A path to a locally stored image.', max_length=255, verbose_name='Image', blank=True)),
                ('website', base_libs.models.fields.URLField(verbose_name='Website', blank=True)),
                ('title_de', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('title_en', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('production', models.ForeignKey(verbose_name='Production', to='productions.Production')),
            ],
            options={
                'ordering': ['title'],
                'verbose_name': 'Sponsor',
                'verbose_name_plural': 'Sponsors',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductionVideo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', editable=False)),
                ('modified_date', models.DateTimeField(verbose_name='modified date', null=True, editable=False)),
                ('title', models.CharField(verbose_name='Title', max_length=255, null=True, editable=False)),
                ('link_or_embed', models.TextField(verbose_name='Link or embed code')),
                ('sort_order', base_libs.models.fields.PositionField(default=None, verbose_name='Sort order')),
                ('title_de', models.CharField(max_length=255, verbose_name='Title')),
                ('title_en', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('production', models.ForeignKey(verbose_name='Production', to='productions.Production')),
            ],
            options={
                'ordering': ['sort_order', 'creation_date'],
                'verbose_name': 'Video/Audio',
                'verbose_name_plural': 'Videos/Audios',
            },
            bases=(models.Model,),
        ),
        migrations.AlterIndexTogether(
            name='productioninvolvement',
            index_together=set([('production', 'sort_order')]),
        ),
        migrations.AddField(
            model_name='production',
            name='categories',
            field=mptt.fields.TreeManyToManyField(to='productions.ProductionCategory', verbose_name='Categories', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='production',
            name='characteristics',
            field=models.ManyToManyField(to='productions.ProductionCharacteristics', verbose_name='Characteristics', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='production',
            name='creator',
            field=models.ForeignKey(related_name='production_creator', on_delete=django.db.models.deletion.SET_NULL, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='creator'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='production',
            name='festivals',
            field=models.ManyToManyField(to='festivals.Festival', verbose_name='Festivals', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='production',
            name='import_source',
            field=models.ForeignKey(blank=True, editable=False, to='external_services.Service', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='production',
            name='in_program_of',
            field=models.ManyToManyField(related_name='program_productions', verbose_name='In the programme of', to='locations.Location', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='production',
            name='language_and_subtitles',
            field=models.ForeignKey(verbose_name='Language / Subtitles', blank=True, to='productions.LanguageAndSubtitles', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='production',
            name='modifier',
            field=models.ForeignKey(related_name='production_modifier', on_delete=django.db.models.deletion.SET_NULL, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='modifier'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='production',
            name='play_locations',
            field=models.ManyToManyField(related_name='located_productions', verbose_name='Theaters', to='locations.Location', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='production',
            name='play_stages',
            field=models.ManyToManyField(to='locations.Stage', verbose_name='Stages', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='production',
            name='related_productions',
            field=models.ManyToManyField(related_name='related_productions_rel_+', verbose_name='Related productions', to='productions.Production', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='production',
            name='sponsors',
            field=models.ManyToManyField(to='sponsors.Sponsor', verbose_name='Sponsors', blank=True),
            preserve_default=True,
        ),
        migrations.AlterIndexTogether(
            name='eventinvolvement',
            index_together=set([('event', 'sort_order')]),
        ),
        migrations.AddField(
            model_name='event',
            name='characteristics',
            field=models.ManyToManyField(to='productions.EventCharacteristics', verbose_name='Characteristics', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='event',
            name='creator',
            field=models.ForeignKey(related_name='event_creator', on_delete=django.db.models.deletion.SET_NULL, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='creator'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='event',
            name='language_and_subtitles',
            field=models.ForeignKey(verbose_name='Language / Subtitles', blank=True, to='productions.LanguageAndSubtitles', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='event',
            name='modifier',
            field=models.ForeignKey(related_name='event_modifier', on_delete=django.db.models.deletion.SET_NULL, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='modifier'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='event',
            name='play_locations',
            field=models.ManyToManyField(to='locations.Location', verbose_name='Theaters', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='event',
            name='play_stages',
            field=models.ManyToManyField(to='locations.Stage', verbose_name='Stages', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='event',
            name='production',
            field=models.ForeignKey(verbose_name='Production', to='productions.Production'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='event',
            name='sponsors',
            field=models.ManyToManyField(to='sponsors.Sponsor', verbose_name='Sponsors', blank=True),
            preserve_default=True,
        ),
    ]
